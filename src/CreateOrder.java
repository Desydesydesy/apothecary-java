
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Desi
 */
public class CreateOrder extends javax.swing.JFrame {

    int quantityColumnIndex = 0;

    /**
     * Creates new form CreateOrder
     */
    public CreateOrder() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        var home = new Home();
        var model = home.loadProducts();

        allProducts.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allProducts = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cart = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        allProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ИД", "Име", "Цена", "Отстъпка", "Количество", "Дата на Изтичане"
            }
        ));
        jScrollPane1.setViewportView(allProducts);

        cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ИД", "Име", "Цена", "Отстъпка", "Количество", "Дата на Изтичане"
            }
        ));
        jScrollPane2.setViewportView(cart);

        btnAdd.setText("Добави");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Премахни");
        btnRemove.setToolTipText("");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCheckout.setText("Завърши Поръчката");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCheckout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCheckout)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int findCartProduct(int id) {
        var cartModel = (DefaultTableModel) cart.getModel();

        for (int i = 0; i < cartModel.getRowCount(); i++) {
            if (id == Integer.parseInt(cartModel.getValueAt(i, 0).toString())) {
                return i;
            }
        }

        return -1;
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        var selectedProduct = allProducts.getSelectedRow();
        var selectedProductId = Integer.parseInt(allProducts.getValueAt(selectedProduct, 0).toString());
        var columnCount = allProducts.getColumnCount();

        var row = new Object[columnCount];
        int currentQuantity = 1;
        int cartProduct = -1;

        for (int i = 0; i < columnCount; i++) {
            var columnName = allProducts.getColumnName(i);

            if (columnName.equals("Количество")) {
                quantityColumnIndex = i;
            }

            if (!columnName.equals("Количество")) {
                row[i] = allProducts.getValueAt(selectedProduct, i);
                continue;
            }

            cartProduct = findCartProduct(selectedProductId);

            if (cartProduct != -1) {
                currentQuantity = Integer.parseInt(cart.getValueAt(cartProduct, i).toString());
                break;
            }

            row[i] = 1;
        }

        if (cartProduct == -1) {
            var cartModel = (DefaultTableModel) cart.getModel();
            cartModel.addRow(row);
        } else {
            cart.setValueAt(currentQuantity + 1, cartProduct, quantityColumnIndex);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedCartItem = cart.getSelectedRow();
        int selectedItemQuantity = Integer.parseInt(cart.getValueAt(selectedCartItem, quantityColumnIndex).toString());

        if (selectedItemQuantity > 1) {
            cart.setValueAt(selectedItemQuantity - 1, selectedCartItem, quantityColumnIndex);
        } else {
            var model = (DefaultTableModel) cart.getModel();
            model.removeRow(selectedCartItem);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    public int findPriceColumn() {
        var model = (DefaultTableModel) cart.getModel();

        for (int i = 0; i < model.getColumnCount(); i++) {
            if (model.getColumnName(i).equals("Цена")) {
                return i;
            }
        }

        return -1;
    }

    public int findQuantityColumn() {
        var model = (DefaultTableModel) cart.getModel();

        for (int i = 0; i < model.getColumnCount(); i++) {
            if (model.getColumnName(i).equals("Количество")) {
                return i;
            }
        }

        return -1;
    }

    public int cartTotal() {
        int total = 0;
        var items = (DefaultTableModel) cart.getModel();
        int priceColumnIndex = findPriceColumn();
        int quantityColumnIndex = findQuantityColumn();

        for (int i = 0; i < items.getRowCount(); i++) {
            int itemPrice = Integer.parseInt(items.getValueAt(i, priceColumnIndex).toString());
            int itemQuantity = Integer.parseInt(items.getValueAt(i, quantityColumnIndex).toString());

            total += itemPrice * itemQuantity;
        }

        return total;
    }

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        try {
            String total = Integer.toString(cartTotal());
            String createdAt = "'" + LocalDate.now().toString() + "'";

            var result = Home.makeQuery()
                    .table("receipts")
                    .create(new String[]{"total", "created_at"}, new String[]{total, createdAt});

            String id = result.getString("id");

            var model = (DefaultTableModel) cart.getModel();
            int quantityColumnIndex = findQuantityColumn();
            String[][] values = new String[cart.getRowCount()][3];
            
            for (int i = 0; i < cart.getRowCount(); i++) {
                String productId = model.getValueAt(i, 0).toString();
                String quantity = model.getValueAt(i, quantityColumnIndex).toString();
                                
                values[i] = new String[]{ id, productId, quantity };
            }
            
            Home.makeQuery()
                    .table("receipt_products")
                    .insert(new String[]{"receipt_id", "product_id", "quantity"}, values);
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            System.out.println(e.getCause());
        }
    }//GEN-LAST:event_btnCheckoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allProducts;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JTable cart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
